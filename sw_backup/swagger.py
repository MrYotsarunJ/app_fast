from typing import Annotated
from fastapi import APIRouter, HTTPException, Path, Query, Depends
from pydantic import BaseModel, EmailStr
from typing import Optional
from dependency import get_valid_user

swagger_router = APIRouter(prefix="/swagger", tags=["Swagger (Demo)"])

# Mock database
user_db = {
    1: {"username": "alice", "email": "alice@example.com"},
    2: {"username": "bob", "email": "bob@example.com"},
}


# User DTO
class User(BaseModel):
    username: str
    email: EmailStr


# üîµ GET all users
@swagger_router.get(
    "/", summary="‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description="‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á"
)
def list_users(
    user: Annotated[dict, Depends(get_valid_user)] = None,
):
    return user_db


# üîµ GET user by ID
@swagger_router.get(
    "/{user_id}",
    summary="‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID",
    description="‡∏£‡∏∞‡∏ö‡∏∏ user_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∞‡πÑ‡∏î‡πâ HTTP 404",
    response_model=User,
)
def get_user(user_id: int = Path(..., gt=0, description="ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")):
    if user_id not in user_db:
        raise HTTPException(status_code=404, detail="User not found")
    return user_db[user_id]


# üü¢ POST new user
@swagger_router.post(
    "/",
    summary="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
    description="‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• username ‡πÅ‡∏•‡∏∞ email ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
    response_model=dict,
)
def create_user(user: User):
    user_id = max(user_db.keys(), default=0) + 1
    user_db[user_id] = user.dict()
    return {"id": user_id, "user": user}


# üü° PUT: replace user data
@swagger_router.put(
    "/{user_id}",
    summary="‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    description="‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å field)",
    response_model=dict,
)
def update_user(user_id: int, user: User):
    if user_id not in user_db:
        raise HTTPException(status_code=404, detail="User not found")
    user_db[user_id] = user.dict()
    return {"id": user_id, "user": user}


# üü† PATCH: update user partially
@swagger_router.patch(
    "/{user_id}",
    summary="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
    description="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≤‡∏á field ‡πÄ‡∏ä‡πà‡∏ô username ‡∏´‡∏£‡∏∑‡∏≠ email ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á object",
    response_model=dict,
)
def patch_user(
    user_id: int,
    username: Optional[str] = Query(None, description="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"),
    email: Optional[EmailStr] = Query(None, description="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà"),
):
    if user_id not in user_db:
        raise HTTPException(status_code=404, detail="User not found")
    if username:
        user_db[user_id]["username"] = username
    if email:
        user_db[user_id]["email"] = email
    return {"id": user_id, "user": user_db[user_id]}


# üî¥ DELETE: remove user
@swagger_router.delete(
    "/{user_id}",
    summary="‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
    description="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ HTTP 404",
)
def delete_user(user_id: int):
    if user_id not in user_db:
        raise HTTPException(status_code=404, detail="User not found")
    del user_db[user_id]
    return {"message": f"User {user_id} deleted"}
